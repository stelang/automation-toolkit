from parm.utilities import write_file, get_conf_file
import jinja2, os, sys
from jinja2 import Environment  


class Initializer():
    """
    initializes parm environment
    """
    def __init__(self):
        self.parmfile   = 'parm.yaml'
        self.env = Environment()

    """
    Generates parm.yaml using user input, checks if file exists as well
    Could be used to initialize more stuff for the user in the future, if new use cases arise
    """
    def initialize(self):
        parmfileExists = False
        if os.path.exists(self.parmfile):
                parmfileExists = True
                print("%s exists already in current directory" %(self.parmfile))

        if parmfileExists:
            proceed = input("Do you wish to override existing %s ? [y/n]: " %(self.parmfile))

        if parmfileExists and proceed != 'y':
            print("exiting")
            sys.exit(0)
        
        product = input("Enter your product name [%s]: "  %("for e.g. testProduct"))
        environment = input("What environment is this for? [%s]: "  %("for e.g. dev")) 
        boto_profile = input("Enter your AWS profile [%s]: "  %("If not sure, find this info on cloudops console"))
        aws_region = input("Enter your AWS region [%s]: "  %("for e.g. us-east-1"))
        account_id = input("Enter your AWS account id [%s]: "  %("If not sure, find this info on cloudops console"))

        params = {
            'product': product,
            'environment': environment,
            'boto_profile': boto_profile,
            'aws_region': aws_region,
            'account_id': account_id
        }

        params.setdefault('product', "<enter product name here>")
        params.setdefault('environment', "<enter environment here>")
        params.setdefault('boto_profile', "<enter AWS boto_profile here>")
        params.setdefault('aws_region', "<enter AWS region here>")
        params.setdefault('account_id', "<enter AWS account id here>")
        
        self._write_parmfile(params)

    
    """
    When called returns a rendered parm.yaml template
    """
    def parmFile(self, params):
        return self.render_template("initializer/parm.yaml", params)

    """
    Simple Render template function without all the parm object stuff
    """
    def render_template(self, template, params):
        templatepath = get_conf_file('../../templates')
        filename = ''.join((
            templatepath,
            ("/" + template
        )))

        template = self.env.from_string(open(filename).read())
        return template.render(params)

    """
    Writes autogenerated parm file to root directory
    """   
    def _write_parmfile(self, params):
        parmfile = open(self.parmfile, 'w+')
        parmfile.write(self.parmFile(params))
        parmfile.close()